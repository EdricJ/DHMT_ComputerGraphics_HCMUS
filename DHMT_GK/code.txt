void LineBresenham(int x0, int y0, int x1, int y1, color c) {
	int dy = y1 – y0; int dx = x1 – x0; int stepx, stepy;
	if(dy < 0) {
		dy = -dy; stepy = -1;
	}
	else
		stepy = 1;
	if(dx < 0) {
		dx = -dx; stepx = -1;
	}
	else
		stepx = 1;
	Setpixel(x0, y0, c);
	if(dx > dy) //m < 1
	{
		p = 2dy – dx;
		while(x0 != x1){
			if(p < 0) {
				p += 2dy;
				x0 += stepx;
			}
			else {
				p += 2dy - 2dx;
				x0 += stepx;
				y0 += stepy;
			}
		}
		Setpixel(x0, y0, c);
	}
	else //dx <= dy
	{
		p = 2dx - dy;
		while(y0 != y1){
			if(p < 0){
				p += 2dx;
				y0 += stepy;
			}
			else {
				p += 2dx - 2dy;
				x0 += stepx;
				y0 += stepy;
			}
		}
		Setpixel(x0, y0, c);
	}
}

void lineDDA(int x1, int y1, int x2, int y2, color c){       // thuat toan DDA
    int  Dx = x2 - x1, Dy = y2 - y1;  
    float x_inc , y_inc;
    float step=max(abs(Dx),abs(Dy));
    x_inc=Dx/step;
    y_inc=Dy/step;
    float x=x1, y=y1;// Khoi tao cac gia tri ban dau
    Setpixel(x, y, c);
      
    int k=1;
    while(k <=step){
        k++;
        delay(DELAY);  // thoi gian tre khi ve 1 diem anh
        x += x_inc;
        y += y_inc;
        cout<<"x="<<x<<"\ty="<<y<<endl;
        Setpixel(Round(x),Round(y), c);
    }
}

void put8pixel(int xc, int yc, int x, int y, color c) //(xc, yc) toa do tam duong tron
{
    Setpixel(x + xc, y + yc, c);
    Setpixel(-x + xc, y + yc, c);
    Setpixel(x + xc, -y + yc, c);
    Setpixel(-x + xc, -y + yc, c);
    Setpixel( y + xc, x + yc, c);
    Setpixel(-y + xc, x + yc, c);
    Setpixel(y + xc, -x + yc, c);
    Setpixel(-y + xc, -x + yc, c);
}

void drawCircleMidpoint(int xc, int yc, int r, color c) //r là ban kinh tam duong tron
{
    int x = 0, y = r;
    int p = 1 - r;

    put8pixel(xc, yc, x, y, c);

    while (x < y)
    {
        if (p < 0) p += (x << 1) + 3; 
        else
        {
            y--;
            p += ((x - y) << 1) + 5;
        }
        x++;
        put8pixel(xc, yc, x, y, c);
    }
}


void plot(int xc, int yc, int x, int y, color c)// (xc, yc) tọa độ tâm ellipse
{
    Setpixel(xc+x, yc+y, c);
    Setpixel(xc-x, yc+y, c);
    Setpixel(xc+x, yc-y, c);
    Setpixel(xc-x, yc-y, c);
}
void elipMidpoint(int xc,int yc, int a, int b, color c) //a bán kính trục r_x, b bán kính trục r_y
{
    int x, y, fx, fy, a2, b2, p;
    x = 0;
    y = b;
    a2 = a*a;
    b2 = b*b;
    fx = 2 * b2 * x;
    fy = 2 * a2 * y;
    plot(xc, yc, x, y, c);
    p = ROUND(b2 -(a2*b) + (0.25*a2));//p=b2 - a2*b + a2/4, nua duong cong thu 1
    while(fx<fy)
    {
        x++;
        fx += 2*b2;
        delay(50);
        if(p<0)
        {
            p += b2*(2*x + 3);//p = p + b2*(2x +3)
        }
        else
        {
            y--;
            p += b2*(2*x +3) + a2*(2- 2*y);//p = p +b2(2x +3) + a2(2-2y)
            fy -= 2*a2;
        }
        plot(xc, yc, x, y, color);
    }
    p = ROUND(b2*(x +0.5)*(x +0.5) + a2*(y-1)*(y-1) - a2*b2);	
    //nua duong cong thu 2
    while(y>0)
    {
        y--;
        fy -= 2*a2;
        delay(50);
        if(p >=0)
        {
            p += a2*(3-2*y); //p=p +a2(3-2y)
        }
        else
        {
            x++;
            fx += 2*b2;
            p += b2*(2*x +2) +a2*(3- 2*y);//p = p + b2(2x +2) + a2(3-2y)
        }
        plot(xc, yc, x, y, color);
    }
}		

Point Casteljau(float t)
{ 
	Point Q[Max]; 
	int i, r; 
	for (i = 0; i <= L; i++) { 
		Q[i].x = P[i].x; 
		Q[i].y = P[i].y; 
	} 
	for (r = 1 ; r <= L; r++) { 	//L la diem dieu khien
		for (i = 0; i <= L - r; i++) { 
			Q[i].x = (1 - t)*Q[i].x + t*Q[i + 1].x; 
			Q[i].y = (1 - t)*Q[i].y + t*Q[i + 1].y; 
		} 
	} 
	return(Q[0]); 
}

void DrawCurve(float a, float b, int NumPoints) { 
	float Delta = (b – a)/(float)NumPoints; 
  	float t = a; int i; 
	moveto(Casteljau(t).x, Casteljau(t).y); 
	for (i = 1; i <= NumPoints; i++) { 
		t += Delta; 
		lineto(Casteljau(t).x, Casteljau(t).y); 
	} 
}

Point Horner_Bezier(float t) { 
	int i, L_choose_i; 
	float Fact, s; 
	Point Q; s = 1.0 - t; 
	Fact = 1.0; 
	L_choose_i = 1; 
	Q.x = P[0].x*s; Q.y = P[0].y*s; 
	for(i = 1; i < L; i++) { 
		Fact *= t; L_choose_i *= (L - i + 1)/i; 
		Q.x = (Q.x + Fact*L_choose_i*P[i].x)*s; 
		Q.y = (Q.y + Fact*L_choose_i*P[i].y)*s; 
	} 
	Q.x += Fact*t*P[L].x; 
	Q.y += Fact*t*P[L].y; 
	return(Q); 
}

//thuat toan xet diem thuoc da giac
int  next(int i)  
{     
	return((i + n + 1) mod n); 
}   
int  prev(int i)   
{      
	return ((i + n - 1) mod n);
}          
bool  PointInpoly(Point[] d, Point P, int n)            
{  
	int  count, I, x_cut;      
	count = 0;    
	for (i = 0; i< n; i++) {      
		if(d[i].y == P.y)      
		{ 
			 if(d[i].x > P.x)                
			 {                  
				if(((d[prev(i)].y < P.y) && (P.y < d[next(i)].y)) || ((d[prev(i)].y > P.y) && (P.y > d[next(i)].y)))                     
					count = count + 1;                  
				if(d[next(i)].y == P.y) {                      
					if(((d[prev(i)].y < P.y) && (P.y < d[next(next(i))].y)) || ((d[prev(i)].y > P.y  && (P.y > d[next(next(i))].y)))           
						count = count + 1;   
				}          
			}      
		}   
		else {  //d[i].y != P.y      
			if (((d[i].y < P.y) && (P.y < d[next(i)].y)) || ((d[i].y > P.y) && (P.y > d[next(i)].y)))      
			{        
				x_cut := d[i].x + Round((d[next(i)].x - d[i].x) / (d[next(i)].y - d[i].y) * (P.y - d[i].y));        
				if(x_cut >= P.x)              
					count := count + 1;     
			}
		} 
	}    
	if(count mod 2 = 0)        
		return  false;    
	return true;           
}

void TomauDagiac(Point[] d; int n, int maubien)  
{ 
	int  x, y;  
	Point  P;  
	for (x = xmin; x <= xmax; x++){             
		for(y = ymin; y<= ymax; y++){                        
			P.x= x;   
			P.y= y;   
			if(pointInpoly(d, P, n)){
				if(getpixel(x,y) != maubien)             
					putpixel(x,y,color); 
			}  				
		}
	}
}	

void ScanFill(Point[] Poly){             
	int min_y = Poly[0].Y, max_y = Poly[0].Y;             
	int min_x = Poly[0].X, max_x = Poly[0].X;             
	for (int i = 1; i < Poly.Length; i++){                 
		if (Poly[i].Y > max_y) 
			max_y = Poly[i].Y;                 
		if (Poly[i].Y < min_y) 
			min_y = Poly[i].Y;                 
		if (Poly[i].X > max_x) 
			max_x = Poly[i].X;                 
		if (Poly[i].X < min_x) 
			min_x = Poly[i].X;             
	}             
	Point G = new Point();             
	Point A, B;             
	for (int y = min_y; y < max_y; y++)
 	{                 
		List<Point> list = new List<Point>();                 
		for (int i = 0; i < Poly.Length - 1; i++){                     
			A = Poly[i];                     
			B = Poly[i + 1];            
			if (Giao(A, B, new Point(min_x, y), new Point(max_x, y), ref G) == true){                       
				if (G == Poly[j]){                         
					if (j == 0){                        
						if ((G.Y > Poly[Poly.Length - 1].Y && G.Y > Poly[1].Y) || (G.Y < Poly[Poly.Length - 1].Y && G.Y < Poly[1].Y))                            {
                                 			list.Add(G);                             
					}                         
				}                         
				else                         
				{
                     		if ((G.Y > Poly[j - 1].Y  && G.Y > Poly[j + 1].Y) || (G.Y < Poly[j - 1].Y && G.Y < Poly[j + 1].Y))                             {                                 
						list.Add(G);                             
				}                         
			}  
			else{ 
				list.Add(G);    
			}                     
		}                 
	}
 	A = Poly[Poly.Length - 1];                 
	B = Poly[0];            
	if (Giao(A, B, new Point(min_x, y), new Point(max_x, y), ref G) == true){                       
		if (G == Poly[j]){                         
			if (j == 0){                    
				if  ((G.Y > Poly[Poly.Length - 1].Y && G.Y > Poly[1].Y) || (G.Y < Poly[Poly.Length - 1].Y && G.Y < Poly[1].Y))     
                       	{                                 
					list.Add(G);                             
				}                         
			}                         
			else{                     
				if ((G.Y > Poly[j - 1].Y  && G.Y > Poly[j + 1].Y) || (G.Y < Poly[j - 1].Y && G.Y < Poly[j + 1].Y))                             
				{                                 
					list.Add(G);                             
				}                         
			}
		}  
		else{ 
			list.Add(G);    
		}                 
		SortList(list);                 
		DrawList(list);             
	}         
}         
void SortList(List<Point> list){
 	for (int i = 0; i < list.Count - 1; i++){                 
		for (int j = i + 1; j < list.Count; j++){                     
			if (list[i].X > list[j].X){                         
				Point t = list[i];                         
				list[i] = list[j];                         
				list[j] = t;                     
			}                 
		}             
	}         
}         

void DrawList(List<Point> list){             
	for (int i = 0; i < list.Count - 1; i += 2){                 
		Line(list[i], list[i + 1]);             
	}         
}

byte[] getPixel(int x, int y){                       
	int[] Pos = new int[2];             
	glRasterPos2i(x, y);                         
	glGetIntegerv(GL_CURRENT_RASTER_POSITION, Pos);             
	int width = 1, height = 1;                         
	byte[] pixels = new byte[3 * width * height]; 
	glReadPixels(Pos[0], Pos[1], width, height, GL_RGB,GL_UNSIGNED_BYTE, pixels);             
	return pixels; 
}

void FloodFill(int x, int y, int Bcolor, byte[] Fcolor){            
	glColor3ubv(Fcolor);            
	byte[] color; 
	int count=0;            
	Point mPT[MaxPT]; 
	mPT[count].x=x; 
	mPT[count].y=y; 
	while(count>0) {            
		count--;            
		color = getPixel(mPT[count].x, mPT[count].y); 
		if(color != Bcolor && color != Fcolor) {            
			glVertext2i(x,y);                       
			mPT[count].x=x+1; mPT[count++].y=y;                       
			mPT[count].x=x-1; mPT[count++].y=y; 
			mPT[count].x=x; mPT[count++].y=y+1; 
			mPT[count].x=x; mPT[count++].y=y-1; 
		}                       
	} 
} 